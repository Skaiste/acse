{
	"name": "CompilationUnit",
	"nodes": [
		{
 			"name": "FunctionDefinition",
			"nodes": [
				{
 					"name": "TypeSpecifier",
					"value": "int"
				},
				{
 					"name": "DirectDeclarator",
					"nodes": [
						{
 							"name": "DirectDeclarator",
							"value": "main"
						},
						{
 							"name": "DirectDeclarator",
							"value": "("
						},
						{
 							"name": "DirectDeclarator",
							"value": ")"
						}
					]
				},
				{
 					"name": "CompoundStatement",
					"nodes": [
						{
 							"name": "CompoundStatement",
							"value": "{"
						},
						{
 							"name": "BlockItemList",
							"nodes": [
								{
 									"name": "BlockItemList",
									"nodes": [
										{
 											"name": "BlockItemList",
											"nodes": [
												{
 													"name": "Declaration",
													"nodes": [
														{
 															"name": "TypeSpecifier",
															"value": "int"
														},
														{
 															"name": "InitDeclaratorList",
															"nodes": [
																{
 																	"name": "DirectDeclarator",
																	"value": "i"
																},
																{
 																	"name": "InitDeclaratorList",
																	"value": ","
																},
																{
 																	"name": "InitDeclarator",
																	"nodes": [
																		{
 																			"name": "DirectDeclarator",
																			"value": "sum"
																		},
																		{
 																			"name": "InitDeclarator",
																			"value": "="
																		},
																		{
 																			"name": "PrimaryExpression",
																			"value": "0"
																		}
																	]
																}
															]
														},
														{
 															"name": "Declaration",
															"value": ";"
														}
													]
												},
												{
 													"name": "IterationStatement",
													"nodes": [
														{
 															"name": "IterationStatement",
															"value": "for"
														},
														{
 															"name": "IterationStatement",
															"value": "("
														},
														{
 															"name": "ForCondition",
															"nodes": [
																{
 																	"name": "AssignmentExpression",
																	"nodes": [
																		{
 																			"name": "PrimaryExpression",
																			"value": "i"
																		},
																		{
 																			"name": "AssignmentOperator",
																			"value": "="
																		},
																		{
 																			"name": "PrimaryExpression",
																			"value": "1"
																		}
																	]
																},
																{
 																	"name": "ForCondition",
																	"value": ";"
																},
																{
 																	"name": "RelationalExpression",
																	"nodes": [
																		{
 																			"name": "PrimaryExpression",
																			"value": "i"
																		},
																		{
 																			"name": "RelationalExpression",
																			"value": "<="
																		},
																		{
 																			"name": "PrimaryExpression",
																			"value": "LAST"
																		}
																	]
																},
																{
 																	"name": "ForCondition",
																	"value": ";"
																},
																{
 																	"name": "PostfixExpression",
																	"nodes": [
																		{
 																			"name": "PrimaryExpression",
																			"value": "i"
																		},
																		{
 																			"name": "PostfixExpression",
																			"value": "++"
																		}
																	]
																}
															]
														},
														{
 															"name": "IterationStatement",
															"value": ")"
														},
														{
 															"name": "CompoundStatement",
															"nodes": [
																{
 																	"name": "CompoundStatement",
																	"value": "{"
																},
																{
 																	"name": "ExpressionStatement",
																	"nodes": [
																		{
 																			"name": "AssignmentExpression",
																			"nodes": [
																				{
 																					"name": "PrimaryExpression",
																					"value": "sum"
																				},
																				{
 																					"name": "AssignmentOperator",
																					"value": "+="
																				},
																				{
 																					"name": "PrimaryExpression",
																					"value": "i"
																				}
																			]
																		},
																		{
 																			"name": "ExpressionStatement",
																			"value": ";"
																		}
																	]
																},
																{
 																	"name": "CompoundStatement",
																	"value": "}"
																}
															]
														}
													]
												}
											]
										},
										{
 											"name": "ExpressionStatement",
											"nodes": [
												{
 													"name": "PostfixExpression",
													"nodes": [
														{
 															"name": "PrimaryExpression",
															"value": "printf"
														},
														{
 															"name": "PostfixExpression",
															"value": "("
														},
														{
 															"name": "ArgumentExpressionList",
															"nodes": [
																{
 																	"name": "PrimaryExpression",
																	"value": "\"sum = %d\n\""
																},
																{
 																	"name": "ArgumentExpressionList",
																	"value": ","
																},
																{
 																	"name": "PrimaryExpression",
																	"value": "sum"
																}
															]
														},
														{
 															"name": "PostfixExpression",
															"value": ")"
														}
													]
												},
												{
 													"name": "ExpressionStatement",
													"value": ";"
												}
											]
										}
									]
								},
								{
 									"name": "JumpStatement",
									"nodes": [
										{
 											"name": "JumpStatement",
											"value": "return"
										},
										{
 											"name": "PrimaryExpression",
											"value": "0"
										},
										{
 											"name": "JumpStatement",
											"value": ";"
										}
									]
								}
							]
						},
						{
 							"name": "CompoundStatement",
							"value": "}"
						}
					]
				}
			]
		},
		{
 			"name": "CompilationUnit",
			"value": "<EOF>"
		}
	]
}